{"version":3,"sources":["colors.js","components/canvas/canvas.js","classes/cell.js","images/first.svg","images/previous.svg","images/next.svg","images/last.svg","images/play.svg","images/pause.svg","components/playback/playback.js","components/range-slider/range-slider.js","components/size-slider/size-slider.js","components/speed-slider/speed-slider.js","components/controls/controls.js","generators.js","images/github.svg","components/selector/selector.js","classes/board.js","classes/generators/randomized-depth-first-search.js","classes/disjoint-set.js","classes/generators/randomized-kruskals-algorithm.js","classes/generators/randomized-prims-algorithm.js","app.js","index.js"],"names":["Colors","white","black","background","Canvas","props","canvasEl","useRef","useEffect","canvas","current","ctx","getContext","width","canvasSize","height","cells","forEach","cell","isWall","fillStyle","fillRect","x","y","stroke","displayCells","id","ref","Cell","index","this","newCells","cellCopy","clone","push","Playback","useState","isPreviousDisabled","setIsPreviousDisabled","isNextDisabled","setIsNextDisabled","isMainButtonDisabled","setIsMainButtonDisabled","timer","setTimer","PlaySvg","mainButtonSvg","setMainButtonSvg","speedRef","speed","historyIndex","history","length","isPlaying","PauseSvg","handleHistoryEntry","historyEntry","keys","Object","values","cloneCellArray","key","i","setCells","play","timeout","next","setHistoryIndex","setTimeout","setIsPlaying","type","alt","disabled","onClick","firstCells","prev","src","FirstSvg","PreviousSvg","clearTimeout","NextSvg","lastCells","LastSvg","RangeSlider","min","max","step","defaultValue","onChange","onMouseUp","SizeSlider","sizeText","setSizeText","event","target","value","setSize","SpeedSlider","speedText","setSpeedText","setSpeed","Math","pow","Controls","Generators","RandomizedDepthFirstSearch","RandomizedKruskalsAlgorithm","RandomizedPrimsAlgorithm","Selector","setGenerator","href","rel","GithubSvg","Board","rows","cols","initCells","j","secondNeumannNeighborhood","secondNeumannNeighbors","getRowAndCol","row","col","top","right","bottom","left","wallSecondNeumannNeighbors","c","neumannNeighborhood","neighbors","wallNeumannNeighborhood","wallNeumannNeighbors","cellBetween","cellA","cellB","wall","floor","stack","generate","size","setHistory","board","getInitialState","startingCell","currentCell","pop","wallNeighbors","randomNeighbor","random","DisjointSet","vals","parents","ranks","numSets","val","val1","val2","link","findSet","root1","root2","wallList","getInitialWallList","cellSets","getInitialCellSets","walls","cellIndices","generatorState","randomWallIndex","randomWall","getCellsDividedByWall","nextHistory","prevHistory","splice","union","concat","randomIndex","cellWhichIsWall","App","generator","generatorText","setGeneratorText","setCanvasSize","n","m","result","closestMultiple","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42f648c0.chunk.js","sourcesContent":["const Colors = {\n  white: '#ffffff',\n  black: '#000000',\n  background: '#2c3035'\n};\n\nexport default Colors;\n","import React, { useEffect, useRef } from 'react';\nimport './canvas.css';\n\nimport Colors from '../../colors.js';\n\nconst Canvas = (props) => {\n  const canvasEl = useRef();\n\n  useEffect(() => {\n    const canvas = canvasEl.current;\n    let ctx = canvas.getContext('2d');\n\n    ctx.canvas.width = props.canvasSize;\n    ctx.canvas.height = props.canvasSize;\n\n    const displayCells = (cells, ctx) => {\n      if (cells) {\n        cells.forEach(cell => {\n          if (cell.isWall) {\n            ctx.fillStyle = Colors.black;\n          } else {\n            ctx.fillStyle = Colors.white;\n          }\n\n          ctx.fillRect(cell.x, cell.y, cell.width, cell.height);\n          ctx.stroke();\n        });\n      } else {\n        ctx.fillStyle = 'black';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      }\n    }\n\n    displayCells(props.cells, ctx);\n  }, [props.cells, props.canvasSize]);\n\n  return (\n    <div id=\"canvas-wrapper\">\n      <canvas\n        id=\"canvas\"\n        ref={canvasEl}\n        width={props.canvasSize}\n        height={props.canvasSize}\n      />\n    </div>\n  );\n};\n\nexport default Canvas;\n","class Cell {\n  constructor(x, y, index, width, height, isWall) {\n    this.x = x;\n    this.y = y;\n    this.index = index;\n    this.width = width;\n    this.height = height;\n    this.isWall = isWall;\n  }\n\n  clone() {\n    return new Cell(this.x, this.y, this.index, this.width, this.height, this.isWall);\n  }\n\n  static cloneCellArray(cells) {\n    let newCells = [];\n\n    cells.forEach((cell) => {\n      let cellCopy = cell.clone();\n      newCells.push(cellCopy);\n    });\n\n    return newCells;\n  }\n}\n\nexport default Cell;\n","export default __webpack_public_path__ + \"static/media/first.c3e0cf7d.svg\";","export default __webpack_public_path__ + \"static/media/previous.4ccf2fd0.svg\";","export default __webpack_public_path__ + \"static/media/next.fe3f3ecb.svg\";","export default __webpack_public_path__ + \"static/media/last.f00f4291.svg\";","export default __webpack_public_path__ + \"static/media/play.54e558df.svg\";","export default __webpack_public_path__ + \"static/media/pause.d4c80d88.svg\";","import React, { useState, useEffect, useRef } from 'react';\nimport Cell from '../../classes/cell.js';\nimport './playback.css';\n\nimport FirstSvg from '../../images/first.svg';\nimport PreviousSvg from '../../images/previous.svg';\nimport NextSvg from '../../images/next.svg';\nimport LastSvg from '../../images/last.svg';\nimport PlaySvg from '../../images/play.svg';\nimport PauseSvg from '../../images/pause.svg';\n\nconst Playback = (props) => {\n  const [isPreviousDisabled, setIsPreviousDisabled] = useState(true);\n  const [isNextDisabled, setIsNextDisabled] = useState(false);\n  const [isMainButtonDisabled, setIsMainButtonDisabled] = useState(false);\n  const [timer, setTimer] = useState(null);\n  const [mainButtonSvg, setMainButtonSvg] = useState(PlaySvg);\n\n  const speedRef = useRef(props.speed);\n  speedRef.current = props.speed;\n\n  useEffect(() => {\n    if (props.historyIndex === 0) {\n      setIsPreviousDisabled(true);\n      setIsNextDisabled(false);\n    } else if (props.historyIndex === props.history.length - 1) {\n      setIsPreviousDisabled(false);\n      setIsNextDisabled(true);\n    } else {\n      setIsPreviousDisabled(false);\n      setIsNextDisabled(false);\n    }\n\n    if (props.historyIndex === props.history.length - 1) {\n      setIsMainButtonDisabled(true);\n    } else {\n      setIsMainButtonDisabled(false);\n    }\n\n    if (props.isPlaying) {\n      setIsPreviousDisabled(true);\n      setIsNextDisabled(true);\n    }\n  }, [props.isPlaying, props.historyIndex, props.history.length]);\n\n  useEffect(() => {\n    if (props.isPlaying) {\n      setMainButtonSvg(PauseSvg);\n    } else {\n      setMainButtonSvg(PlaySvg);\n    }\n  }, [props.isPlaying]);\n\n  const first = () => {\n    let firstCells = props.history[0].prev;\n\n    props.setHistoryIndex(0);\n    props.setCells(Cell.cloneCellArray(firstCells));\n  }\n\n  const last = () => {\n    let lastCells = props.history[props.history.length - 1].next;\n\n    props.setHistoryIndex(props.history.length - 1);\n    props.setCells(Cell.cloneCellArray(lastCells));\n  }\n\n  const next = () => {\n    let historyIndex = props.historyIndex;\n    props.setHistoryIndex(historyIndex + 1);\n\n    let historyEntry = props.history[props.historyIndex].next;\n    handleHistoryEntry(historyEntry);\n  }\n\n  const previous = () => {\n    let historyIndex = props.historyIndex;\n    props.setHistoryIndex(historyIndex - 1);\n\n    let historyEntry = props.history[props.historyIndex].prev;\n    handleHistoryEntry(historyEntry);\n  }\n\n  const handleHistoryEntry = (historyEntry) => {\n    let keys = Object.keys(historyEntry);\n    let values = Object.values(historyEntry);\n    let newCells = Cell.cloneCellArray(props.cells);\n\n    keys.forEach((key, i) => {\n      newCells[key].isWall = values[i];\n    });\n\n    props.setCells(newCells);\n  }\n\n  const play = (historyIndex, cells) => {\n    let timeout = 1000 * (1 / speedRef.current);\n\n    let historyEntry = props.history[historyIndex].next;\n    let keys = Object.keys(historyEntry);\n    let values = Object.values(historyEntry);\n    let newCells = Cell.cloneCellArray(cells);\n\n    keys.forEach((key, i) => {\n      newCells[key].isWall = values[i];\n    });\n\n    historyIndex += 1;\n\n    props.setHistoryIndex(historyIndex);\n    props.setCells(newCells);\n\n    if (historyIndex < props.history.length - 1) {\n      setTimer(setTimeout(() => { play(historyIndex, newCells); }, timeout));\n    } else {\n      props.setIsPlaying(false);\n    }\n  }\n\n  const pause = () => {\n    clearTimeout(timer)\n  }\n\n  const mainButtonOnClick = () => {\n    if (props.isPlaying) {\n      props.setIsPlaying(false);\n\n      pause();\n    } else {\n      props.setIsPlaying(true);\n\n      play(props.historyIndex, props.cells);\n    }\n  }\n\n  return (\n    <div id=\"playback-wrapper\">\n      <input\n        type=\"image\"\n        alt=\"first\"\n        disabled={isPreviousDisabled}\n        onClick={first}\n        src={FirstSvg}\n      />\n      <input\n        type=\"image\"\n        alt=\"previous\"\n        disabled={isPreviousDisabled}\n        onClick={previous}\n        src={PreviousSvg}\n      />\n      <input\n        type=\"image\"\n        alt=\"play-pause\"\n        disabled={isMainButtonDisabled}\n        onClick={mainButtonOnClick}\n        src={mainButtonSvg}\n      />\n      <input\n        type=\"image\"\n        alt=\"next\"\n        disabled={isNextDisabled}\n        onClick={next}\n        src={NextSvg}\n      />\n      <input\n        type=\"image\"\n        alt=\"last\"\n        disabled={isNextDisabled}\n        onClick={last}\n        src={LastSvg}\n      />\n    </div>\n  );\n};\n\nexport default Playback;\n","import React from 'react';\nimport './range-slider.css';\n\nconst RangeSlider = (props) => {\n  return (\n    <div id=\"range-slider-wrapper\">\n      <div>{props.min}</div>\n      <input\n        type=\"range\"\n        disabled={props.disabled}\n        min={props.min}\n        max={props.max}\n        step={props.step}\n        defaultValue={props.defaultValue}\n        onChange={props.onChange}\n        onMouseUp={props.onMouseUp}\n      />\n      <div>{props.max}</div>\n    </div>\n  );\n};\n\nexport default RangeSlider;\n","import React, { useState } from 'react';\nimport './size-slider.css';\nimport RangeSlider from '../range-slider/range-slider.js';\n\nconst SizeSlider = (props) => {\n  const [sizeText, setSizeText] = useState('size: 10');\n\n  return (\n    <div id=\"size-slider-wrapper\">\n      <p>{sizeText}</p>\n      <RangeSlider\n        disabled={props.isPlaying}\n        type=\"range\"\n        min=\"2\"\n        max=\"50\"\n        step=\"1\"\n        defaultValue=\"10\"\n        onChange={(event) => { setSizeText('size: ' + event.target.value); }}\n        onMouseUp={(event) => { props.setSize(event.target.value); }}\n      />\n    </div>\n  );\n};\n\nexport default SizeSlider;\n","import React, { useState } from 'react';\nimport './speed-slider.css';\nimport RangeSlider from '../range-slider/range-slider.js';\n\nconst SpeedSlider = (props) => {\n  const [speedText, setSpeedText] = useState('speed: 0');\n\n  return (\n    <div id=\"speed-slider-wrapper\">\n      <p>{speedText}</p>\n      <RangeSlider\n        disabled={props.isPlaying}\n        type=\"range\"\n        min=\"0\"\n        max=\"1\"\n        step=\"0.01\"\n        defaultValue=\"0\"\n        onChange={(event) => {\n          setSpeedText('speed: ' + event.target.value);\n          props.setSpeed(Math.pow(1000, event.target.value));\n        }}\n      />\n    </div>\n  );\n};\n\nexport default SpeedSlider;\n","import React from 'react';\nimport './controls.css';\n\nimport Playback from '../playback/playback.js';\nimport SizeSlider from '../size-slider/size-slider.js';\nimport SpeedSlider from '../speed-slider/speed-slider.js';\n\nconst Controls = (props) => {\n  return (\n    <div id=\"controls-wrapper\">\n      <h2>controls</h2>\n      <SizeSlider\n        setSize={props.setSize}\n        isPlaying={props.isPlaying}\n      />\n      <SpeedSlider\n        setSpeed={props.setSpeed}\n      />\n      <Playback\n        history={props.history}\n        speed={props.speed}\n        historyIndex={props.historyIndex} setHistoryIndex={props.setHistoryIndex}\n        isPlaying={props.isPlaying} setIsPlaying={props.setIsPlaying}\n        cells={props.cells} setCells={props.setCells}\n      />\n      <div></div>\n      <blockquote>\n        <p>\n          <span>Such was the work, so intricate the place,</span>\n          <span>That scarce the workman all its turns cou’d trace;</span>\n          <span>And Daedalus was puzzled how to find</span>\n          <span>The secret ways of what himself design’d.</span>\n        </p>\n        <p>— Ovid, <cite>Metamorphoses</cite></p>\n      </blockquote>\n    </div>\n  );\n};\n\nexport default Controls;\n","const Generators = {\n  RandomizedDepthFirstSearch: 0,\n  RandomizedKruskalsAlgorithm: 1,\n  RandomizedPrimsAlgorithm: 2\n};\n\nexport default Generators;\n","export default __webpack_public_path__ + \"static/media/github.1a78f568.svg\";","import React from 'react';\nimport './selector.css';\n\nimport Generators from '../../generators.js';\n\nimport GithubSvg from '../../images/github.svg';\n\nconst Selector = (props) => {\n\n  const setToRandomizedDepthFirstSearch = () => {\n    props.setGenerator({current: Generators.RandomizedDepthFirstSearch});\n  }\n\n  const setToRandomizedKruskalsAlgorithm = () => {\n    props.setGenerator({current: Generators.RandomizedKruskalsAlgorithm});\n  }\n\n  const setToRandomizedPrimsAlgorithm = () => {\n    props.setGenerator({current: Generators.RandomizedPrimsAlgorithm});\n  }\n\n  return (\n    <div id='selector-wrapper'>\n      <h2>maze generation algorithms</h2>\n      <button\n        onClick={setToRandomizedDepthFirstSearch}\n        disabled={props.isPlaying}>\n          randomized depth first search\n      </button>\n      <button\n        onClick={setToRandomizedKruskalsAlgorithm}\n        disabled={props.isPlaying}>\n          randomized kruskal’s algorithm\n      </button>\n      <button\n        onClick={setToRandomizedPrimsAlgorithm}\n        disabled={props.isPlaying}>\n          randomized prim’s algorithm\n      </button>\n      <a href=\"https://github.com/maticstric/daedalus\"\n         target=\"_blank\"\n         rel=\"noreferrer\">\n        <img src={GithubSvg} alt=\"github\" />\n      </a>\n    </div>\n  );\n};\n\nexport default Selector;\n","import Cell from './cell.js';\n\nclass Board {\n  constructor(width, height, rows, cols) {\n    this.width = width; // Width and height in pixels\n    this.height = height;\n    this.rows = rows;   // Num of rows and cols\n    this.cols = cols;\n\n    this.cells = this.initCells();\n  }\n\n  initCells = () => {\n    let cells = [];\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        let width = this.width / this.cols;\n        let height = this.height / this.rows;\n        let x = width * j;\n        let y = height * i;\n        let index = i * this.cols + j;\n\n        cells.push(new Cell(x, y, index, width, height, true));\n      }\n    }\n\n    return cells;\n  }\n\n  secondNeumannNeighborhood = (cell) => {\n    let secondNeumannNeighbors = [];\n    let {row, col} = this.getRowAndCol(cell);\n\n    let top = this.cells[this.index(row - 2, col)];\n    let right = this.cells[this.index(row, col + 2)];\n    let bottom = this.cells[this.index(row + 2, col)];\n    let left = this.cells[this.index(row, col - 2)];\n\n    if (top) { secondNeumannNeighbors.push(top); }\n    if (right) { secondNeumannNeighbors.push(right); }\n    if (bottom) { secondNeumannNeighbors.push(bottom); }\n    if (left) { secondNeumannNeighbors.push(left); }\n\n    return secondNeumannNeighbors;\n  }\n\n  wallSecondNeumannNeighbors = (cell) => {\n    let secondNeumannNeighbors = this.secondNeumannNeighborhood(cell);\n    let wallSecondNeumannNeighbors = [];\n\n    for (let i = 0; i < secondNeumannNeighbors.length; i++) {\n      let c = secondNeumannNeighbors[i];\n\n      if(c.isWall) {\n        wallSecondNeumannNeighbors.push(c);\n      }\n    }\n\n    return wallSecondNeumannNeighbors;\n  }\n\n  neumannNeighborhood = (cell) => {\n    let neighbors = [];\n    let {row, col} = this.getRowAndCol(cell);\n    let top, right, bottom, left;\n\n    // The first and last rows/cols are just the edge of the board so we must ignore them\n\n    if (row - 1 > 0) {\n      top = this.cells[this.index(row - 1, col)];\n    }\n\n    if (col + 1 < this.cols - 1) {\n      right = this.cells[this.index(row, col + 1)];\n    }\n\n    if (row + 1 < this.rows - 1) {\n      bottom = this.cells[this.index(row + 1, col)];\n    }\n\n    if (col - 1 > 0) {\n      left = this.cells[this.index(row, col - 1)];\n    }\n\n    if (top) { neighbors.push(top); }\n    if (right) { neighbors.push(right); }\n    if (bottom) { neighbors.push(bottom); }\n    if (left) { neighbors.push(left); }\n\n    return neighbors;\n  }\n\n  wallNeumannNeighborhood = (cell) => {\n    let neighbors = this.neumannNeighborhood(cell);\n    let wallNeumannNeighbors = [];\n\n    for (let i = 0; i < neighbors.length; i++) {\n      let c = neighbors[i];\n\n      if(c.isWall) {\n        wallNeumannNeighbors.push(c);\n      }\n    }\n\n    return wallNeumannNeighbors;\n  }\n\n  cellBetween = (cellA, cellB) => {\n    if (cellA.index - cellB.index === 2) {\n      return this.cells[cellB.index + 1];\n    } else if (cellB.index - cellA.index === 2) {\n      return this.cells[cellA.index + 1];\n    } else if (cellA.index - cellB.index === this.cols * 2) {\n      return this.cells[cellB.index + this.cols];\n    } else if (cellB.index - cellA.index === this.cols * 2) {\n      return this.cells[cellA.index + this.cols];\n    }\n  }\n\n  getCellsDividedByWall(wall) {\n    let {row, col} = this.getRowAndCol(wall);\n    let cellA;\n    let cellB;\n\n    if (row % 2 === 0) {\n      cellA = this.cells[wall.index - this.cols];\n      cellB = this.cells[wall.index + this.cols];\n    } else if (col % 2 === 0) {\n      cellA = this.cells[wall.index - 1];\n      cellB = this.cells[wall.index + 1];\n    }\n\n    return { cellA: cellA, cellB: cellB };\n  }\n\n\n  index(row, col) { // Convert from 2d array coordinates to 1d\n    if (row < 0 || col < 0 || row > this.rows - 1 || col > this.cols - 1) {\n      return -1; // Invalid index\n    }\n\n    return col + row * this.cols;\n  }\n\n  getRowAndCol(cell) { // Convert from 1d array coordinates to 2d\n    let row = Math.floor(cell.index / this.cols);\n    let col = cell.index % this.cols;\n\n    return {row: row, col: col};\n  }\n}\n\nexport default Board;\n","import Board from '../board.js';\nimport Cell from '../cell.js';\n\nclass RandomizedDepthFirstSearch {\n  static generate = (size, canvasSize, setHistory, setHistoryIndex, setCells) => {\n    let board = new Board(canvasSize, canvasSize, (size * 2) + 1, (size * 2) + 1);\n    let generatorState = this.getInitialState();\n    let stack = generatorState.stack;\n    let history = [{\n      prev: Cell.cloneCellArray(board.cells), // 'prev' in first entry takes you to initial state\n      next: null\n    }];\n\n    let startingCell = board.cells[board.cols + 1]\n    board.cells[startingCell.index].isWall = false;\n\n    stack.push(startingCell);\n\n    while (stack.length !== 0) {\n      let currentCell = stack.pop();\n\n      let wallNeighbors = board.wallSecondNeumannNeighbors(currentCell);\n\n      if (wallNeighbors.length !== 0) {\n        stack.push(currentCell);\n\n        let randomIndex = Math.floor(Math.random() * wallNeighbors.length);\n        let randomNeighbor = wallNeighbors[randomIndex];\n\n        let cellBetween = board.cellBetween(currentCell, randomNeighbor);\n        board.cells[cellBetween.index].isWall = false;\n\n        board.cells[randomNeighbor.index].isWall = false;\n        stack.push(randomNeighbor);\n\n        history[history.length - 1].next = {\n          [cellBetween.index]: false,\n          [randomNeighbor.index]: false\n        };\n\n        history.push({\n          prev: {\n            [cellBetween.index]: true,\n            [randomNeighbor.index]: true\n          },\n          next: null\n        });\n      }\n    }\n\n    // 'next' in last entry takes you to final state\n    history[history.length - 1].next = Cell.cloneCellArray(board.cells);\n\n    // 'startingCell' is a special case so we just add it here\n    history[0].next[startingCell.index] = false;\n    history[1].prev[startingCell.index] = true;\n\n    setHistory(history);\n    setHistoryIndex(history.length - 1);\n    setCells(Cell.cloneCellArray(board.cells));\n  }\n\n  static getInitialState() {\n    return {\n      stack: []\n    }\n  }\n}\n\nexport default RandomizedDepthFirstSearch;\n","class DisjointSet {\n  constructor(vals) {\n    this.parents = {};\n    this.ranks = {};\n    this.numSets = vals.length;\n\n    for (let i = 0; i < vals.length; i++) {\n      let val = vals[i];\n      this.parents[val] = val;\n      this.ranks[val] = 0;\n    }\n  }\n\n  union(val1, val2) {\n    this.link(this.findSet(val1), this.findSet(val2));\n\n    this.numSets -= 1;\n  }\n\n  link(root1, root2) {\n    if (root1 === root2) {\n      return;\n    }\n\n    if (this.ranks[root1] > this.ranks[root2]) {\n      this.parents[root2] = root1;\n    } else {\n      this.parents[root1] = root2;\n\n      if (this.ranks[root1] === this.ranks[root2]) {\n        this.ranks[root2] += 1;\n      }\n    }\n  }\n\n  findSet(val) {\n    if (this.parents[val] !== val) {\n      this.parents[val] = this.findSet(this.parents[val]);\n    }\n\n    return this.parents[val];\n  }\n}\n\nexport default DisjointSet;\n","import Board from '../board.js';\nimport Cell from '../cell.js';\nimport DisjointSet from '../disjoint-set.js';\n\nclass RandomizedKruskalsAlgorithm {\n  static generate = (size, canvasSize, setHistory, setHistoryIndex, setCells) => {\n    let board = new Board(canvasSize, canvasSize, (size * 2) + 1, (size * 2) + 1);\n    let generatorState = this.getInitialState(board);\n    let wallList = generatorState.wallList;\n    let cellSets = generatorState.cellSets;\n    let history = [{\n      prev: Cell.cloneCellArray(board.cells), // 'prev' in first entry takes you to initial state\n      next: null\n    }];\n\n    while (cellSets.numSets > 1) {\n      let randomWallIndex = Math.floor(Math.random() * wallList.length);\n      let randomWall = wallList[randomWallIndex];\n\n      let {cellA, cellB} = board.getCellsDividedByWall(randomWall);\n\n      if (cellSets.findSet(cellA.index) !== cellSets.findSet(cellB.index)) {\n        let nextHistory = {};\n        let prevHistory = {};\n\n        if (board.cells[cellA.index].isWall) {\n          board.cells[cellA.index].isWall = false;\n          nextHistory[cellA.index] = false;\n          prevHistory[cellA.index] = true;\n        }\n\n        if (board.cells[cellB.index].isWall) {\n          board.cells[cellB.index].isWall = false;\n          nextHistory[cellB.index] = false;\n          prevHistory[cellB.index] = true;\n        }\n\n        if (board.cells[randomWall.index].isWall) {\n          board.cells[randomWall.index].isWall = false;\n          nextHistory[randomWall.index] = false;\n          prevHistory[randomWall.index] = true;\n        }\n\n        wallList.splice(randomWallIndex, 1);\n\n        cellSets.union(cellA.index, cellB.index);\n\n        history[history.length - 1].next = nextHistory;\n\n        history.push({\n          prev: prevHistory,\n          next: null\n        });\n      }\n    }\n\n    // 'next' in last entry takes you to final state\n    history[history.length - 1].next = Cell.cloneCellArray(board.cells);\n\n    setHistory(history);\n    setHistoryIndex(history.length - 1);\n    setCells(Cell.cloneCellArray(board.cells));\n  }\n\n  static getInitialState(board) {\n    return {\n      wallList: this.getInitialWallList(board),\n      cellSets: this.getInitialCellSets(board)\n    }\n  }\n\n  static getInitialWallList(board) {\n    let walls = [];\n\n    board.cells.forEach((cell) => {\n      let {row, col} = board.getRowAndCol(cell);\n\n      if (row !== 0 && row !== board.rows - 1 && col !== 0 && col !== board.cols - 1) {\n        if (row % 2 !== 0 || col % 2 !== 0) {\n          if (row % 2 === 0)  {\n            walls.push(cell);\n          } else if (col % 2 === 0) {\n            walls.push(cell);\n          }\n        }\n      }\n    });\n\n    return walls;\n  }\n\n  static getInitialCellSets(board) {\n    let cellIndices = [];\n\n    board.cells.forEach((cell) => {\n      let {row, col} = board.getRowAndCol(cell);\n\n      if (row % 2 === 1 && col % 2 === 1)  {\n        cellIndices.push(cell.index);\n      }\n    });\n\n    return new DisjointSet(cellIndices);\n  }\n}\n\nexport default RandomizedKruskalsAlgorithm;\n","import Board from '../board.js';\nimport Cell from '../cell.js';\n\nclass RandomizedPrimsAlgorithm {\n  static generate = (size, canvasSize, setHistory, setHistoryIndex, setCells) => {\n    let board = new Board(canvasSize, canvasSize, (size * 2) + 1, (size * 2) + 1);\n    let generatorState = this.getInitialState();\n    let wallList = generatorState.wallList;\n    let history = [{\n      prev: Cell.cloneCellArray(board.cells), // 'prev' in first entry takes you to initial state\n      next: null\n    }];\n\n    let startingCell = board.cells[board.cols + 1]\n    board.cells[startingCell.index].isWall = false;\n\n    let wallNeumannNeighborhood = board.wallNeumannNeighborhood(startingCell);\n    wallList = wallList.concat(wallNeumannNeighborhood);\n\n    while (wallList.length > 0) {\n      let randomIndex = Math.floor(Math.random() * wallList.length);\n      let randomWall = wallList[randomIndex];\n\n      let {cellA, cellB} = board.getCellsDividedByWall(randomWall);\n\n      if ((!cellA.isWall && cellB.isWall) || (cellA.isWall && !cellB.isWall)) { // XOR\n        let cellWhichIsWall = cellA.isWall ? cellA : cellB;\n\n        randomWall.isWall = false;\n        cellWhichIsWall.isWall = false;\n\n        let wallNeumannNeighborhood = board.wallNeumannNeighborhood(cellWhichIsWall);\n        wallList = wallList.concat(wallNeumannNeighborhood);\n\n        history[history.length - 1].next = {\n          [randomWall.index]: false,\n          [cellWhichIsWall.index]: false\n        };\n\n        history.push({\n          prev: {\n            [randomWall.index]: true,\n            [cellWhichIsWall.index]: true\n          },\n          next: null\n        });\n      }\n\n      wallList.splice(randomIndex, 1);\n    }\n\n    // 'next' in last entry takes you to final state\n    history[history.length - 1].next = Cell.cloneCellArray(board.cells);\n\n    // 'startingCell' is a special case so we just add it here\n    history[0].next[startingCell.index] = false;\n    history[1].prev[startingCell.index] = true;\n\n    setHistory(history);\n    setHistoryIndex(history.length - 1);\n    setCells(Cell.cloneCellArray(board.cells));\n  }\n\n  static getInitialState() {\n    return {\n      wallList: []\n    }\n  }\n}\n\nexport default RandomizedPrimsAlgorithm;\n","import React, { useState, useEffect } from 'react';\nimport './app.css';\n\nimport Canvas from './components/canvas/canvas.js';\nimport Controls from './components/controls/controls.js';\nimport Selector from './components/selector/selector.js';\nimport Generators from './generators.js';\nimport RandomizedDepthFirstSearch from './classes/generators/randomized-depth-first-search.js';\nimport RandomizedKruskalsAlgorithm from './classes/generators/randomized-kruskals-algorithm.js';\nimport RandomizedPrimsAlgorithm from './classes/generators/randomized-prims-algorithm.js';\n\nconst App = (props) => {\n  const [generator, setGenerator] = useState({current: Generators.RandomizedDepthFirstSearch});\n  const [generatorText, setGeneratorText] = useState('randomized depth first search');\n  const [cells, setCells] = useState(null);\n  const [size, setSize] = useState(10);\n  const [speed, setSpeed] = useState(1);\n  const [canvasSize, setCanvasSize] = useState(546);\n  const [historyIndex, setHistoryIndex] = useState(0);\n  const [history, setHistory] = useState([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  useEffect(() => {\n    const closestMultiple = (n, m) => {\n      let result = n + m / 2;\n      result -= result % m;\n\n      return result;\n    }\n\n    let canvasSize = closestMultiple(550, 2 * size + 1);\n    setCanvasSize(canvasSize);\n\n    if (generator.current === Generators.RandomizedDepthFirstSearch) {\n      RandomizedDepthFirstSearch.generate(size, canvasSize, setHistory, setHistoryIndex, setCells);\n      setGeneratorText('randomized depth first search');\n    } else if (generator.current === Generators.RandomizedKruskalsAlgorithm) {\n      RandomizedKruskalsAlgorithm.generate(size, canvasSize, setHistory, setHistoryIndex, setCells);\n      setGeneratorText('randomized kruskal’s algorithm');\n    } else if (generator.current === Generators.RandomizedPrimsAlgorithm) {\n      RandomizedPrimsAlgorithm.generate(size, canvasSize, setHistory, setHistoryIndex, setCells);\n      setGeneratorText('randomized prim’s algorithm');\n    }\n  }, [generator, size]);\n\n  return (\n    <div id=\"app\">\n      <Controls\n        history={history}\n        setSize={setSize}\n        historyIndex={historyIndex} setHistoryIndex={setHistoryIndex}\n        speed={speed} setSpeed={setSpeed}\n        isPlaying={isPlaying} setIsPlaying={setIsPlaying}\n        cells={cells} setCells={setCells}\n      />\n      <div id=\"center\">\n        <h1>daedalus</h1>\n        <h2>{generatorText}</h2>\n        <Canvas\n          cells={cells}\n          canvasSize={canvasSize}\n        />\n      </div>\n      <Selector\n        setGenerator={setGenerator}\n        isPlaying={isPlaying}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}