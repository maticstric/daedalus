{"version":3,"sources":["colors.js","components/canvas/canvas.js","images/first.svg","images/previous.svg","images/next.svg","images/last.svg","images/play.svg","images/pause.svg","components/playback/playback.js","components/range-slider/range-slider.js","components/size-slider/size-slider.js","components/speed-slider/speed-slider.js","components/controls/controls.js","generators.js","components/selector/selector.js","classes/cell.js","classes/board.js","classes/generators/randomized-depth-first-search.js","classes/generators/randomized-kruskals-algorithm.js","classes/generators/randomized-prims-algorithm.js","app.js","index.js"],"names":["Colors","white","black","background","Canvas","props","canvasEl","useRef","useEffect","canvas","current","ctx","getContext","width","canvasSize","height","board","cells","forEach","cell","isWall","fillStyle","fillRect","x","y","stroke","showBoard","history","historyIndex","id","ref","Playback","useState","isPreviousDisabled","setIsPreviousDisabled","isNextDisabled","setIsNextDisabled","isMainButtonDisabled","setIsMainButtonDisabled","timer","setTimer","PlaySvg","mainButtonSvg","setMainButtonSvg","speedRef","speed","length","isPlaying","PauseSvg","play","timeout","setHistoryIndex","setTimeout","setIsPlaying","type","alt","disabled","onClick","src","FirstSvg","PreviousSvg","clearTimeout","NextSvg","LastSvg","RangeSlider","min","max","step","defaultValue","onChange","onMouseUp","SizeSlider","sizeText","setSizeText","event","target","value","setSize","SpeedSlider","speedText","setSpeedText","setSpeed","Math","pow","Controls","Generators","RandomizedDepthFirstSearch","RandomizedKruskalsAlgorithm","RandomizedPrimsAlgorithm","Selector","setGenerator","Cell","index","this","Board","rows","cols","initCells","i","j","push","neumannNeighborhood","neighbors","getRowAndCol","row","col","top","right","bottom","left","cellBetween","cellA","cellB","clone","boardCopy","cellCopy","wall","floor","stack","state","newStack","newCell","generate","size","setHistory","newBoard","newGeneratorState","getInitialState","newHistory","startingCell","currentCell","pop","wallNeighbors","randomNeighbor","random","cloneState","c","sets","set","s","walls","cellSets","cellSet","Set","add","wallList","getInitialWallList","getInitialCellSets","newWallList","newCellSets","newSet","randomWallIndex","randomWall","getCellsDividedByWall","setOfCellA","getSetWithCell","setOfCellB","splice","indexOf","wallNeumannNeighborhood","randomIndex","cellWhichIsWall","App","generator","generatorText","setGeneratorText","setCanvasSize","n","m","result","closestMultiple","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dcc4271c.chunk.js","sourcesContent":["const Colors = {\n  white: '#ffffff',\n  black: '#000000',\n  background: '#2c3035'\n};\n\nexport default Colors;\n","import React, { useEffect, useRef } from 'react';\nimport './canvas.css';\n\nimport Colors from '../../colors.js';\n\nconst Canvas = (props) => {\n  const canvasEl = useRef();\n\n  useEffect(() => {\n    const canvas = canvasEl.current;\n    let ctx = canvas.getContext('2d');\n\n    ctx.canvas.width = props.canvasSize;\n    ctx.canvas.height = props.canvasSize;\n\n    const showBoard = (board, ctx) => {\n      if (board) {\n        board.cells.forEach(cell => {\n          if (cell.isWall) {\n            ctx.fillStyle = Colors.black;\n          } else {\n            ctx.fillStyle = Colors.white;\n          }\n\n          ctx.fillRect(cell.x, cell.y, cell.width, cell.height);\n          ctx.stroke();\n        });\n      } else {\n        ctx.fillStyle = 'black';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      }\n    }\n\n    let board = props.history[props.historyIndex];\n\n    showBoard(board, ctx);\n  }, [props.historyIndex, props.history, props.canvasSize]);\n\n  return (\n    <div id=\"canvas-wrapper\">\n      <canvas\n        id=\"canvas\"\n        ref={canvasEl}\n        width={props.canvasSize}\n        height={props.canvasSize}\n      />\n    </div>\n  );\n};\n\nexport default Canvas;\n","export default __webpack_public_path__ + \"static/media/first.c3e0cf7d.svg\";","export default __webpack_public_path__ + \"static/media/previous.4ccf2fd0.svg\";","export default __webpack_public_path__ + \"static/media/next.fe3f3ecb.svg\";","export default __webpack_public_path__ + \"static/media/last.f00f4291.svg\";","export default __webpack_public_path__ + \"static/media/play.54e558df.svg\";","export default __webpack_public_path__ + \"static/media/pause.d4c80d88.svg\";","import React, { useState, useEffect, useRef } from 'react';\nimport './playback.css';\n\nimport FirstSvg from '../../images/first.svg';\nimport PreviousSvg from '../../images/previous.svg';\nimport NextSvg from '../../images/next.svg';\nimport LastSvg from '../../images/last.svg';\nimport PlaySvg from '../../images/play.svg';\nimport PauseSvg from '../../images/pause.svg';\n\nconst Playback = (props) => {\n  const [isPreviousDisabled, setIsPreviousDisabled] = useState(true);\n  const [isNextDisabled, setIsNextDisabled] = useState(false);\n  const [isMainButtonDisabled, setIsMainButtonDisabled] = useState(false);\n  const [timer, setTimer] = useState(null);\n  const [mainButtonSvg, setMainButtonSvg] = useState(PlaySvg);\n\n  const speedRef = useRef(props.speed);\n  speedRef.current = props.speed;\n\n  useEffect(() => {\n    if (props.historyIndex === 0) {\n      setIsPreviousDisabled(true);\n      setIsNextDisabled(false);\n    } else if (props.historyIndex === props.history.length - 1) {\n      setIsPreviousDisabled(false);\n      setIsNextDisabled(true);\n    } else {\n      setIsPreviousDisabled(false);\n      setIsNextDisabled(false);\n    }\n\n    if (props.historyIndex === props.history.length - 1) {\n      setIsMainButtonDisabled(true);\n    } else {\n      setIsMainButtonDisabled(false);\n    }\n\n    if (props.isPlaying) {\n      setIsPreviousDisabled(true);\n      setIsNextDisabled(true);\n    }\n  }, [props.isPlaying, props.historyIndex, props.history.length]);\n\n  useEffect(() => {\n    if (props.isPlaying) {\n      setMainButtonSvg(PauseSvg);\n    } else {\n      setMainButtonSvg(PlaySvg);\n    }\n  }, [props.isPlaying]);\n\n  const first = () => {\n    props.setHistoryIndex(0);\n  }\n\n  const last = () => {\n    props.setHistoryIndex(props.history.length - 1);\n  }\n\n  const next = () => {\n    let historyIndex = props.historyIndex;\n    props.setHistoryIndex(historyIndex + 1);\n  }\n\n  const previous = () => {\n    let historyIndex = props.historyIndex;\n    props.setHistoryIndex(historyIndex - 1);\n  }\n\n  const play = (historyIndex) => {\n    let timeout = 1000 * (1 / speedRef.current);\n\n    historyIndex += 1;\n    props.setHistoryIndex(historyIndex);\n\n    if (historyIndex < props.history.length - 1) {\n      setTimer(setTimeout(() => { play(historyIndex); }, timeout));\n    } else {\n      props.setIsPlaying(false);\n    }\n  }\n\n  const pause = () => {\n    clearTimeout(timer)\n  }\n\n  const mainButtonOnClick = () => {\n    if (props.isPlaying) {\n      props.setIsPlaying(false);\n\n      pause();\n    } else {\n      props.setIsPlaying(true);\n\n      play(props.historyIndex);\n    }\n  }\n\n  return (\n    <div id=\"playback-wrapper\">\n      <input\n        type=\"image\"\n        alt=\"first\"\n        disabled={isPreviousDisabled}\n        onClick={first}\n        src={FirstSvg}\n      />\n      <input\n        type=\"image\"\n        alt=\"previous\"\n        disabled={isPreviousDisabled}\n        onClick={previous}\n        src={PreviousSvg}\n      />\n      <input\n        type=\"image\"\n        alt=\"play-pause\"\n        disabled={isMainButtonDisabled}\n        onClick={mainButtonOnClick}\n        src={mainButtonSvg}\n      />\n      <input\n        type=\"image\"\n        alt=\"next\"\n        disabled={isNextDisabled}\n        onClick={next}\n        src={NextSvg}\n      />\n      <input\n        type=\"image\"\n        alt=\"last\"\n        disabled={isNextDisabled}\n        onClick={last}\n        src={LastSvg}\n      />\n    </div>\n  );\n};\n\nexport default Playback;\n","import React, { useState } from 'react';\nimport './range-slider.css';\n\nconst RangeSlider = (props) => {\n  const [sizeText, setSizeText] = useState('size: 10');\n\n  return (\n    <div id=\"range-slider-wrapper\">\n      <div>{props.min}</div>\n      <input\n        type=\"range\"\n        disabled={props.disabled}\n        min={props.min}\n        max={props.max}\n        step={props.step}\n        defaultValue={props.defaultValue}\n        onChange={props.onChange}\n        onMouseUp={props.onMouseUp}\n      />\n      <div>{props.max}</div>\n    </div>\n  );\n};\n\nexport default RangeSlider;\n","import React, { useState } from 'react';\nimport './size-slider.css';\nimport RangeSlider from '../range-slider/range-slider.js';\n\nconst SizeSlider = (props) => {\n  const [sizeText, setSizeText] = useState('size: 10');\n\n  return (\n    <div id=\"size-slider-wrapper\">\n      <p>{sizeText}</p>\n      <RangeSlider\n        disabled={props.isPlaying}\n        type=\"range\"\n        min=\"2\"\n        max=\"30\"\n        step=\"1\"\n        defaultValue=\"10\"\n        onChange={(event) => { setSizeText('size: ' + event.target.value); }}\n        onMouseUp={(event) => { props.setSize(event.target.value); }}\n      />\n    </div>\n  );\n};\n\nexport default SizeSlider;\n","import React, { useState } from 'react';\nimport './speed-slider.css';\nimport RangeSlider from '../range-slider/range-slider.js';\n\nconst SpeedSlider = (props) => {\n  const [speedText, setSpeedText] = useState('speed: 0');\n\n  return (\n    <div id=\"speed-slider-wrapper\">\n      <p>{speedText}</p>\n      <RangeSlider\n        disabled={props.isPlaying}\n        type=\"range\"\n        min=\"0\"\n        max=\"1\"\n        step=\"0.01\"\n        defaultValue=\"0\"\n        onChange={(event) => {\n            setSpeedText('speed: ' + event.target.value);\n            props.setSpeed(Math.pow(1000, event.target.value)); \n        }}\n      />\n    </div>\n  );\n};\n\nexport default SpeedSlider;\n","import React from 'react';\nimport './controls.css';\n\nimport Playback from '../playback/playback.js';\nimport SizeSlider from '../size-slider/size-slider.js';\nimport SpeedSlider from '../speed-slider/speed-slider.js';\n\nconst Controls = (props) => {\n  return (\n    <div id=\"controls-wrapper\">\n      <h2>controls</h2>\n      <SizeSlider\n        setSize={props.setSize}\n        isPlaying={props.isPlaying}\n      />\n      <SpeedSlider\n        setSpeed={props.setSpeed}\n      />\n      <Playback\n        historyIndex={props.historyIndex}\n        history={props.history}\n        setHistoryIndex={props.setHistoryIndex}\n        speed={props.speed}\n        isPlaying={props.isPlaying}\n        setIsPlaying={props.setIsPlaying}\n      />\n      <div></div>\n      <blockquote>\n        <p>\n          <span>Such was the work, so intricate the place,</span>\n          <span>That scarce the workman all its turns cou’d trace;</span>\n          <span>And Daedalus was puzzled how to find</span>\n          <span>The secret ways of what himself design’d.</span>\n        </p>\n        <p>— Ovid, <cite>Metamorphoses</cite></p>\n      </blockquote>\n    </div>\n  );\n};\n\nexport default Controls;\n","const Generators = {\n  RandomizedDepthFirstSearch: 0,\n  RandomizedKruskalsAlgorithm: 1,\n  RandomizedPrimsAlgorithm: 2\n};\n\nexport default Generators;\n","import React from 'react';\nimport './selector.css';\n\nimport Generators from '../../generators.js';\n\nconst Selector = (props) => {\n\n  const setToRandomizedDepthFirstSearch = () => {\n    props.setGenerator({current: Generators.RandomizedDepthFirstSearch});\n  }\n\n  const setToRandomizedKruskalsAlgorithm = () => {\n    props.setGenerator({current: Generators.RandomizedKruskalsAlgorithm});\n  }\n\n  const setToRandomizedPrimsAlgorithm = () => {\n    props.setGenerator({current: Generators.RandomizedPrimsAlgorithm});\n  }\n\n  return (\n    <div id='selector-wrapper'>\n      <h2>maze generation algorithms</h2>\n      <button\n        onClick={setToRandomizedDepthFirstSearch}\n        disabled={props.isPlaying}>\n          randomized depth first search\n      </button>\n      <button\n        onClick={setToRandomizedKruskalsAlgorithm}\n        disabled={props.isPlaying}>\n          randomized kruskal’s algorithm\n      </button>\n      <button\n        onClick={setToRandomizedPrimsAlgorithm}\n        disabled={props.isPlaying}>\n          randomized prim’s algorithm\n      </button>\n    </div>\n  );\n};\n\nexport default Selector;\n","class Cell {\n  constructor(x, y, index, width, height, isWall) {\n    this.x = x;\n    this.y = y;\n    this.index = index;\n    this.width = width;\n    this.height = height;\n    this.isWall = isWall;\n  }\n\n  clone() {\n    return new Cell(this.x, this.y, this.index, this.width, this.height, this.isWall);\n  }\n}\n\nexport default Cell;\n","import Cell from './cell.js';\n\nclass Board {\n  constructor(width, height, rows, cols) {\n    this.width = width; // Width and height in pixels\n    this.height = height;\n    this.rows = rows;   // Num of rows and cols\n    this.cols = cols;\n\n    this.cells = this.initCells();\n  }\n\n  initCells = () => {\n    let cells = [];\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        let width = this.width / this.cols;\n        let height = this.height / this.rows;\n        let x = width * j;\n        let y = height * i;\n        let index = i * this.cols + j;\n\n        cells.push(new Cell(x, y, index, width, height, true));\n      }\n    }\n\n    return cells;\n  }\n\n  neumannNeighborhood = (cell) => {\n    let neighbors = [];\n    let {row, col} = this.getRowAndCol(cell);\n    \n    let top = this.cells[this.index(row - 2, col)];\n    let right = this.cells[this.index(row, col + 2)];\n    let bottom = this.cells[this.index(row + 2, col)];\n    let left = this.cells[this.index(row, col - 2)];\n\n    if (top) { neighbors.push(top); }\n    if (right) { neighbors.push(right); }\n    if (bottom) { neighbors.push(bottom); }\n    if (left) { neighbors.push(left); }\n\n    return neighbors;\n  }\n\n  cellBetween = (cellA, cellB) => {\n    if (cellA.index - cellB.index === 2) {\n      return this.cells[cellB.index + 1];\n    } else if (cellB.index - cellA.index === 2) {\n      return this.cells[cellA.index + 1];\n    } else if (cellA.index - cellB.index === this.cols * 2) {\n      return this.cells[cellB.index + this.cols];\n    } else if (cellB.index - cellA.index === this.cols * 2) {\n      return this.cells[cellA.index + this.cols];\n    }\n  }\n\n  getCellsDividedByWall(wall) {\n    let {row, col} = this.getRowAndCol(wall);\n    let cellA;\n    let cellB;\n\n    if (row % 2 === 0) {\n      cellA = this.cells[wall.index - this.cols];\n      cellB = this.cells[wall.index + this.cols];\n    } else if (col % 2 === 0) {\n      cellA = this.cells[wall.index - 1];\n      cellB = this.cells[wall.index + 1];\n    }\n\n    return { cellA: cellA, cellB: cellB };\n  }\n\n\n  index = (row, col) => { // Convert from 2d array coordinates to 1d\n    if (row < 0 || col < 0 || row > this.rows - 1 || col > this.cols - 1) {\n      return -1; // Invalid index\n    }\n\n    return col + row * this.cols;\n  }\n  \n  getRowAndCol(cell) {\n    let row = Math.floor(cell.index / this.cols);\n    let col = cell.index % this.cols;\n\n    return {row: row, col: col};\n  }\n\n  clone = () => {\n    let boardCopy = new Board(this.width, this.height, this.rows, this.cols);\n\n    boardCopy.cells = [];\n\n    this.cells.forEach((cell) => {\n      let cellCopy = cell.clone();\n      boardCopy.cells.push(cellCopy);\n    });\n\n\n    return boardCopy;\n  }\n}\n\nexport default Board;\n","import Board from '../board.js';\n\nclass RandomizedDepthFirstSearch {\n  static generate = (size, canvasSize, setHistory, setHistoryIndex) => {\n    let newBoard = new Board(canvasSize, canvasSize, (size * 2) + 1, (size * 2) + 1);\n    let newGeneratorState = this.getInitialState();\n    let newStack = newGeneratorState.stack;\n    let newHistory = [newBoard.clone()];\n\n    if (newStack.length === 0) {\n      let startingCell = newBoard.cells[newBoard.cols + 1]\n      newBoard.cells[startingCell.index].isWall = false;\n\n      newStack.push(startingCell);\n    }\n\n    while (newStack.length !== 0) {\n      let currentCell = newStack.pop();\n\n      let wallNeighbors = this.wallNeighbors(newBoard, currentCell);\n\n      if (wallNeighbors.length !== 0) {\n        newStack.push(currentCell);\n\n        let randomIndex = Math.floor(Math.random() * wallNeighbors.length);\n        let randomNeighbor = wallNeighbors[randomIndex];\n\n        let cellBetween = newBoard.cellBetween(currentCell, randomNeighbor);\n        newBoard.cells[cellBetween.index].isWall = false;\n\n        newBoard.cells[randomNeighbor.index].isWall = false;\n        newStack.push(randomNeighbor);\n\n        newHistory.push(newBoard);\n\n        newBoard = newBoard.clone();\n        newGeneratorState = this.cloneState(newBoard, newGeneratorState);\n        newStack = newGeneratorState.stack;\n      }\n    }\n\n    setHistory(newHistory);\n    setHistoryIndex(newHistory.length - 1);\n  }\n\n  static wallNeighbors = (board, cell) => {\n    let neighbors = board.neumannNeighborhood(cell);\n    let wallNeighbors = [];\n\n    for (let i = 0; i < neighbors.length; i++) {\n      let c = neighbors[i];\n      if(c.isWall) {\n        wallNeighbors.push(c);\n      }\n    }\n\n    return wallNeighbors;\n  }\n\n  static getInitialState() {\n    return {\n      stack: []\n    }\n  }\n\n  static cloneState(board, state) {\n    let newStack = []; \n\n    state.stack.forEach((cell) => {\n      let newCell = board.cells[cell.index];\n\n      newStack.push(newCell);\n    });\n\n    return { stack: newStack };\n  }\n}\n\nexport default RandomizedDepthFirstSearch;\n","import Board from '../board.js';\n\nclass RandomizedKruskalsAlgorithm {\n  static generate = (size, canvasSize, setHistory, setHistoryIndex) => {\n    let newBoard = new Board(canvasSize, canvasSize, (size * 2) + 1, (size * 2) + 1);\n    let newGeneratorState = this.getInitialState(newBoard);\n    let newWallList = newGeneratorState.wallList;\n    let newCellSets = newGeneratorState.cellSets;\n    let newHistory = [newBoard.clone()];\n\n    while (newCellSets.length > 1) {\n      let randomWallIndex = Math.floor(Math.random() * newWallList.length);\n      let randomWall = newWallList[randomWallIndex];\n\n      let {cellA, cellB} = newBoard.getCellsDividedByWall(randomWall);\n      let setOfCellA = this.getSetWithCell(newCellSets, cellA);\n      let setOfCellB = this.getSetWithCell(newCellSets, cellB);\n\n      if (setOfCellA !== setOfCellB) {\n        newBoard.cells[cellA.index].isWall = false;\n        newBoard.cells[cellB.index].isWall = false;\n        newBoard.cells[randomWall.index].isWall = false;\n\n        newWallList.splice(randomWallIndex, 1);\n\n        newCellSets.splice(newCellSets.indexOf(setOfCellA), 1);\n        newCellSets.splice(newCellSets.indexOf(setOfCellB), 1);\n        newCellSets.push(new Set([...setOfCellA, ...setOfCellB]));\n\n        newHistory.push(newBoard);\n\n        newBoard = newBoard.clone();\n        newGeneratorState = this.cloneState(newBoard, newGeneratorState);\n        newWallList = newGeneratorState.wallList;\n        newCellSets = newGeneratorState.cellSets;\n      }\n    }\n\n    setHistory(newHistory);\n    setHistoryIndex(newHistory.length - 1);\n  }\n\n  static getSetWithCell(sets, cell) {\n    let set;\n    sets.forEach((s) => {\n      s.forEach((c) => {\n        if (c === cell) {\n          set = s;\n        }\n      });\n    });\n\n    return set;\n  }\n\n  static getInitialWallList(board) {\n    let walls = [];\n\n    board.cells.forEach((cell) => {\n      let {row, col} = board.getRowAndCol(cell);\n\n      if (row !== 0 && row !== board.rows - 1 && col !== 0 && col !== board.cols - 1) {\n        if (row % 2 !== 0 || col % 2 !== 0) {\n          if (row % 2 === 0)  {\n            walls.push(cell);\n          } else if (col % 2 === 0) {\n            walls.push(cell);\n          }\n        }\n      }\n    });\n\n    return walls;\n  }\n\n  static getInitialCellSets(board) {\n    let cellSets = [];\n\n    board.cells.forEach((cell) => {\n      let {row, col} = board.getRowAndCol(cell);\n\n      if (row % 2 === 1 && col % 2 === 1)  {\n        let cellSet = new Set();\n        cellSet.add(cell);\n        cellSets.push(cellSet);\n      }\n    });\n\n    return cellSets;\n  }\n\n  static getInitialState(board) {\n    return {\n      wallList: this.getInitialWallList(board),\n      cellSets: this.getInitialCellSets(board)\n    }\n  }\n\n  static cloneState(board, state) {\n    let newWallList = []; \n    let newCellSets = []; \n\n    state.wallList.forEach((cell) => {\n      let newCell = board.cells[cell.index];\n\n      newWallList.push(newCell);\n    });\n\n    state.cellSets.forEach((set) => {\n      let newSet = new Set();\n\n      set.forEach((cell) => {\n        let newCell = board.cells[cell.index];\n        newSet.add(newCell);\n      });\n\n      newCellSets.push(newSet);\n    });\n\n    return {\n      wallList: newWallList,\n      cellSets: newCellSets\n    }\n  }\n}\n\nexport default RandomizedKruskalsAlgorithm;\n","import Board from '../board.js';\n\nclass RandomizedPrimsAlgorithm {\n  static generate = (size, canvasSize, setHistory, setHistoryIndex) => {\n    let newBoard = new Board(canvasSize, canvasSize, (size * 2) + 1, (size * 2) + 1);\n    let newGeneratorState = this.getInitialState();\n    let newWallList = newGeneratorState.wallList;\n    let newHistory = [newBoard.clone()];\n\n    if (newWallList.length === 0) {\n      let startingCell = newBoard.cells[newBoard.cols + 1]\n      newBoard.cells[startingCell.index].isWall = false;\n\n      let wallNeumannNeighborhood = this.wallNeumannNeighborhood(newBoard, startingCell);\n      newWallList.push(...wallNeumannNeighborhood);\n    }\n\n    while (newWallList.length > 0) {\n      let randomIndex = Math.floor(Math.random() * newWallList.length);\n      let randomWall = newWallList[randomIndex];\n\n      let {cellA, cellB} = newBoard.getCellsDividedByWall(randomWall);\n\n      if ((!cellA.isWall && cellB.isWall) || (cellA.isWall && !cellB.isWall)) { // XOR\n        let cellWhichIsWall = cellA.isWall ? cellA : cellB;\n\n        randomWall.isWall = false;\n        cellWhichIsWall.isWall = false;\n\n        let wallNeumannNeighborhood = this.wallNeumannNeighborhood(newBoard, cellWhichIsWall);\n        newWallList.push(...wallNeumannNeighborhood);\n\n        newHistory.push(newBoard);\n\n        newBoard = newBoard.clone();\n        newGeneratorState = this.cloneState(newBoard, newGeneratorState);\n        newWallList = newGeneratorState.wallList;\n      }\n\n      newWallList.splice(randomIndex, 1);\n    }\n\n    setHistory(newHistory);\n    setHistoryIndex(newHistory.length - 1);\n  }\n\n  static wallNeumannNeighborhood(board, cell) {\n    let wallNeighbors = [];\n    let {row, col} = board.getRowAndCol(cell);\n    let top, right, bottom, left;\n    \n    if (row - 1 > 0) {\n      top = board.cells[board.index(row - 1, col)];\n    }\n\n    if (col + 1 < board.cols - 1) {\n      right = board.cells[board.index(row, col + 1)];\n    }\n\n    if (row + 1 < board.rows - 1) {\n      bottom = board.cells[board.index(row + 1, col)];\n    }\n\n    if (col - 1 > 0) {\n      left = board.cells[board.index(row, col - 1)];\n    }\n\n    if (top && top.isWall) { wallNeighbors.push(top); }\n    if (right && right.isWall) { wallNeighbors.push(right); }\n    if (bottom && bottom.isWall) { wallNeighbors.push(bottom); }\n    if (left && left.isWall) { wallNeighbors.push(left); }\n\n    return wallNeighbors;\n  }\n\n  static getInitialState() {\n    return {\n      wallList: []\n    }\n  }\n\n  static cloneState(board, state) {\n    let newWallList = []; \n\n    state.wallList.forEach((cell) => {\n      let newCell = board.cells[cell.index];\n\n      newWallList.push(newCell);\n    });\n\n    return { wallList: newWallList };\n  }\n}\n\nexport default RandomizedPrimsAlgorithm;\n","import React, { useState, useEffect } from 'react';\nimport './app.css';\n\nimport Canvas from './components/canvas/canvas.js';\nimport Controls from './components/controls/controls.js';\nimport Selector from './components/selector/selector.js';\nimport Generators from './generators.js';\nimport RandomizedDepthFirstSearch from './classes/generators/randomized-depth-first-search.js';\nimport RandomizedKruskalsAlgorithm from './classes/generators/randomized-kruskals-algorithm.js';\nimport RandomizedPrimsAlgorithm from './classes/generators/randomized-prims-algorithm.js';\n\nconst App = (props) => {\n  const [generator, setGenerator] = useState({current: Generators.RandomizedDepthFirstSearch});\n  const [generatorText, setGeneratorText] = useState('randomized depth first search');\n  const [size, setSize] = useState(10);\n  const [speed, setSpeed] = useState(1);\n  const [canvasSize, setCanvasSize] = useState(546);\n  const [historyIndex, setHistoryIndex] = useState(0);\n  const [history, setHistory] = useState([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  useEffect(() => {\n    const closestMultiple = (n, m) => {\n      let result = n + m / 2;\n      result -= result % m;\n\n      return result;\n    }\n\n    let canvasSize = closestMultiple(550, 2 * size + 1);\n    setCanvasSize(canvasSize);\n\n    if (generator.current === Generators.RandomizedDepthFirstSearch) {\n      RandomizedDepthFirstSearch.generate(size, canvasSize, setHistory, setHistoryIndex);\n      setGeneratorText('randomized depth first search');\n    } else if (generator.current === Generators.RandomizedKruskalsAlgorithm) {\n      RandomizedKruskalsAlgorithm.generate(size, canvasSize, setHistory, setHistoryIndex);\n      setGeneratorText('randomized kruskal’s algorithm');\n    } else if (generator.current === Generators.RandomizedPrimsAlgorithm) {\n      RandomizedPrimsAlgorithm.generate(size, canvasSize, setHistory, setHistoryIndex);\n      setGeneratorText('randomized prim’s algorithm');\n    }\n  }, [generator, size]);\n\n  return (\n    <div id=\"app\">\n      <Controls\n        historyIndex={historyIndex}\n        history={history}\n        setHistoryIndex={setHistoryIndex}\n        setSize={setSize}\n        setSpeed={setSpeed}\n        setIsPlaying={setIsPlaying}\n        speed={speed}\n        isPlaying={isPlaying}\n      />\n      <div id=\"center\">\n        <h1>daedalus</h1>\n        <h2>{generatorText}</h2>\n        <Canvas\n          history={history}\n          historyIndex={historyIndex}\n          canvasSize={canvasSize}\n        />\n      </div>\n      <Selector\n        setGenerator={setGenerator}\n        isPlaying={isPlaying}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}